import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.datasets import make_regression
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score

#creating Datasets
X,y = make_regression(n_samples=100, n_features=1,noise=22,random_state=42)
X_train,X_test, y_train, y_test= train_test_split(X,y, test_size=0.2, random_state=42)

#using LinearRegression Class
model=LinearRegression()
model.fit(X_train, y_train)
y_pred=model.predict(X_test)
print(r2_score(y_test,y_pred))

#Creating Class from Scratch
class SLR:
  def __init__(self):
    self.coef_=None
    self.intercept_=None

  def fit(self,X_train,y_train):
    X_train=X_train.ravel()
    y_train=y_train.ravel()
    self.coef_=np.sum((y_train-np.mean(y_train))*(X_train-np.mean(X_train))) / np.sum((X_train-np.mean(X_train))**2)
    self.intercept_=np.mean(y_train)-self.coef_*np.mean(X_train)

  def predict(self,X_test):
    X_test=X_test.ravel()
    return self.coef_*X_test + self.intercept_

#implementing SLR
slr=SLR()
slr.fit(X_train,y_train)
y_pred1= slr.predict(X_test)
print(model.coef_, slr.coef_)
print(model.intercept_, slr.intercept_)
